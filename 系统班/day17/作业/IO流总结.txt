2. IO流总结
	概念
		* IO流用来处理设备之间的数据传输
		* Java对数据的操作是通过流的方式
		* Java用于操作流的类都在IO包中
		* 流按流向分为两种：输入流，输出流。
		* 流按操作类型分为两种：
			* 字节流 : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的
			* 字符流 : 字符流只能操作纯字符数据，比较方便。

	
	字节流
		|--InputStream(字节输入流,字节流的抽象父类,抽象类不能直接创建对象,必须使用子类)
			|--FileInputStream(文件字节输入流,就是以字节的形式读取文件内容)
				|--read()每次读取一个字节(byte),但是返回值类型,为int类型
				|--read(byte[] b)每次读取多个字节,将内容放入字节数组b中,返回值类型int
			|--BufferedInputStream(字节输入缓冲流,其实就是一个包装类,创建对象时要接收一个InputStream,内部封装了一个1024*8的字节数组)
				
				
				
		|--OutputStream(字节输出流,字节流的抽象父类)
			|--FileOutputStream(文件字节输出流,就是以字节的形式将内容写入到文件中)
				|--write(int b)一次写出一个字节
				|--write(byte[] b)将字节数组b里的内容写入到文件中
				|--write(byte[] b, int off, int len)将字节数组b里的内容,从索引为off的位置开始,总共写len个
			|--BufferedOutputStream(字节输出缓冲流,其实就是一个包装类,创建对象时要接收一个OutputStream,内部封装了一个1024*8的字节数组)		
		
	字符流
		|--Reader(字符输入流,字符流的抽象父类,抽象类不能直接创建对象,必须使用子类)
			|--FileReader(文件字符输入流,就是以字符的形式读取文件中的内容)
				|--read()每次读取一个字符,即可以按照字符大小读取,返回值类型提升为int类型
				|--read(char[] b)每次读取多个字符,将内容放入字符数组b中,返回值类型int
			|--BufferedReader(字符输入缓冲流,其实就是一个包装类,创建对象时要接收一个Reader,内部封装了一个1024*8的字符数组)
				|--readLine()可以读取一行字符(不包含换行符号)
				
			
		|--Writer(字符输出流,字符流的抽象父类)
			|--FileWriter(文件字符输出流,就是以字符的形式将内容写入到文件中)
				|--write('a')/write("aaaa")可以写入单个字符或者写入字符串
				|--write(char[] b, int off, int len)将字符数组b里的内容,从索引为off的位置开始,总共写len个
			|--BufferedWriter(字符输出缓冲流,其实就是一个包装类,创建对象时要接收一个Writer,内部封装了一个1024*8的字符数组)		
				|--newLine()可以输出一个跨平台的换行符号"\r\n"
				
	转换流(使用指定的码表读写字符) 
		|--InputStreamReader字节输入流到字符输入流的桥梁,按照指定编码读取文件内容
		|--OutputStreamWriter字符输出流到字节输出流的桥梁,按照指定编码向文件中写入内容
			

				
	flush用来刷新缓冲区的,flush后流仍然可以使用
	close用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出,即不能再使用该流



